


ARM Macro Assembler    Page 1 


    1 00000000         ; ------------------------------------------------------
                       -------------------------
    2 00000000                 THUMB                        ; Instru√É¬ß√É¬µes 
                                                            do tipo Thumb-2
    3 00000000         ; ------------------------------------------------------
                       -------------------------
    4 00000000         
    5 00000000         
    6 00000000         ; ------------------------------------------------------
                       -------------------------
    7 00000000         ; √É¬Årea de C√É¬≥digo - Tudo abaixo da diretiva a segui
                       r ser√É¬° armazenado na mem√É¬≥ria de 
    8 00000000         ;                  c√É¬≥digo
    9 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   10 00000000         
   11 00000000         ; Se alguma fun√É¬ß√É¬£o do arquivo for chamada em outro
                        arquivo 
   12 00000000                 EXPORT           DefineLedA
   13 00000000                 EXPORT           DefineLedB
   14 00000000                 EXPORT           DefineLedC
   15 00000000                 EXPORT           DefineLedD
   16 00000000                 EXPORT           DefineLedE
   17 00000000                 EXPORT           DefineLedF
   18 00000000                 EXPORT           DefineLedG
   19 00000000         
   20 00000000         DefineLedA
   21 00000000         ; Define o led (a) do display       ; MNOP
   22 00000000 F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
   23 00000004         
   24 00000004 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
   25 00000008 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
   26 0000000C F003 0201       AND              R2, R3, #1  ; 
   27 00000010         
   28 00000010 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
   29 00000014 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
   30 00000018 F003 0201       AND              R2, R3, #1  ; 
   31 0000001C         
   32 0000001C F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
   33 00000020 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
   34 00000024 F003 0201       AND              R2, R3, #1  ; 
   35 00000028         
   36 00000028 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
   37 0000002C F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √



ARM Macro Assembler    Page 2 


                                                            © 1 (l√≥gica negada
                                                            )
   38 00000030 F003 0201       AND              R2, R3, #1  ; 
   39 00000034 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
   40 00000036         
   41 00000036         
   42 00000036 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
   43 0000003A F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
   44 0000003E F003 0201       AND              R2, R3, #1  ; 
   45 00000042         
   46 00000042 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
   47 00000046 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
   48 0000004A F003 0201       AND              R2, R3, #1  ; 
   49 0000004E         
   50 0000004E F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
   51 00000052 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
   52 00000056 F003 0201       AND              R2, R3, #1  ; 
   53 0000005A         
   54 0000005A F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
   55 0000005E F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
   56 00000062 F003 0201       AND              R2, R3, #1  ; 
   57 00000066 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
   58 0000006A         
   59 0000006A         
   60 0000006A F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
   61 0000006E F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
   62 00000072 F003 0201       AND              R2, R3, #1  ; 
   63 00000076         
   64 00000076 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
   65 0000007A F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
   66 0000007E F003 0201       AND              R2, R3, #1  ; 
   67 00000082         
   68 00000082 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d



ARM Macro Assembler    Page 3 


                                                            e R0
   69 00000086 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
   70 0000008A F003 0201       AND              R2, R3, #1  ; 
   71 0000008E         
   72 0000008E F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
   73 00000092 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
   74 00000096 F003 0201       AND              R2, R3, #1  ; 
   75 0000009A EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
   76 0000009E         
   77 0000009E         
   78 0000009E F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
   79 000000A2 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
   80 000000A6 F003 0201       AND              R2, R3, #1  ; 
   81 000000AA         
   82 000000AA F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
   83 000000AE F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
   84 000000B2 F003 0201       AND              R2, R3, #1  ; 
   85 000000B6         
   86 000000B6 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
   87 000000BA F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
   88 000000BE F003 0201       AND              R2, R3, #1  ; 
   89 000000C2         
   90 000000C2 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
   91 000000C6 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
   92 000000CA F003 0201       AND              R2, R3, #1  ; 
   93 000000CE EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
   94 000000D2         
   95 000000D2 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
   96 000000D4 BF08            IT               EQ
   97 000000D6 F045 0501       ORREQ            R5, R5, #0x1 ; Se for igual, se
                                                            ta o bit para ligar
                                                             o led (a)
   98 000000DA         



ARM Macro Assembler    Page 4 


   99 000000DA 4770            BX               LR
  100 000000DC         
  101 000000DC         DefineLedB
  102 000000DC         ; Define o led (b) do display       ; MNOP
  103 000000DC F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  104 000000E0         
  105 000000E0 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  106 000000E4 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  107 000000E8 F003 0201       AND              R2, R3, #1  ; 
  108 000000EC         
  109 000000EC F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  110 000000F0 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  111 000000F4 F003 0201       AND              R2, R3, #1  ; 
  112 000000F8         
  113 000000F8 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  114 000000FC F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  115 00000100 F003 0201       AND              R2, R3, #1  ; 
  116 00000104         
  117 00000104 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  118 00000108 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  119 0000010C F003 0201       AND              R2, R3, #1  ; 
  120 00000110 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  121 00000112         
  122 00000112         
  123 00000112 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  124 00000116 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  125 0000011A F003 0201       AND              R2, R3, #1  ; 
  126 0000011E         
  127 0000011E F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  128 00000122 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  129 00000126 F003 0201       AND              R2, R3, #1  ; 
  130 0000012A         
  131 0000012A F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d



ARM Macro Assembler    Page 5 


                                                            e R0
  132 0000012E F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  133 00000132 F003 0201       AND              R2, R3, #1  ; 
  134 00000136 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  135 0000013A         
  136 0000013A         
  137 0000013A F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  138 0000013E F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  139 00000142 F003 0201       AND              R2, R3, #1  ; 
  140 00000146         
  141 00000146 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  142 0000014A F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  143 0000014E F003 0201       AND              R2, R3, #1  ; 
  144 00000152         
  145 00000152 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  146 00000156 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  147 0000015A F003 0201       AND              R2, R3, #1  ; 
  148 0000015E EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  149 00000162         
  150 00000162         
  151 00000162 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  152 00000166 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  153 0000016A F003 0201       AND              R2, R3, #1  ; 
  154 0000016E         
  155 0000016E F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  156 00000172 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  157 00000176 F003 0201       AND              R2, R3, #1  ; 
  158 0000017A         
  159 0000017A F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  160 0000017E F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )



ARM Macro Assembler    Page 6 


  161 00000182 F003 0201       AND              R2, R3, #1  ; 
  162 00000186 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  163 0000018A         
  164 0000018A 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  165 0000018C BF08            IT               EQ
  166 0000018E F045 0510       ORREQ            R5, R5, #0x10 ; Se for igual, s
                                                            eta o bit para liga
                                                            r o led (b)
  167 00000192         
  168 00000192 4770            BX               LR
  169 00000194         
  170 00000194         DefineLedC
  171 00000194         ; Define o led (c) do display       ; MNOP
  172 00000194 F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  173 00000198         
  174 00000198 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  175 0000019C F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  176 000001A0 F003 0201       AND              R2, R3, #1  ; 
  177 000001A4         
  178 000001A4 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  179 000001A8 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  180 000001AC F003 0201       AND              R2, R3, #1  ; 
  181 000001B0         
  182 000001B0 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  183 000001B4 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  184 000001B8 F003 0201       AND              R2, R3, #1  ; 
  185 000001BC 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  186 000001BE         
  187 000001BE         
  188 000001BE F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  189 000001C2 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  190 000001C6 F003 0201       AND              R2, R3, #1  ; 
  191 000001CA         
  192 000001CA F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  193 000001CE F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )



ARM Macro Assembler    Page 7 


  194 000001D2 F003 0201       AND              R2, R3, #1  ; 
  195 000001D6         
  196 000001D6 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  197 000001DA F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  198 000001DE F003 0201       AND              R2, R3, #1  ; 
  199 000001E2 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  200 000001E6         
  201 000001E6         
  202 000001E6 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  203 000001EA F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  204 000001EE F003 0201       AND              R2, R3, #1
  205 000001F2         
  206 000001F2 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  207 000001F6 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  208 000001FA F003 0201       AND              R2, R3, #1  ; 
  209 000001FE         
  210 000001FE F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  211 00000202 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  212 00000206 F003 0201       AND              R2, R3, #1  ; 
  213 0000020A         
  214 0000020A F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  215 0000020E F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  216 00000212 F003 0201       AND              R2, R3, #1  ; 
  217 00000216 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  218 0000021A         
  219 0000021A 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  220 0000021C BF08            IT               EQ
  221 0000021E F445 7580       ORREQ            R5, R5, #0x100 ; Se for igual, 
                                                            seta o bit para lig
                                                            ar o led (c)
  222 00000222         
  223 00000222 4770            BX               LR
  224 00000224         
  225 00000224         DefineLedD
  226 00000224         ; Define o led (d) do display       ; MNOP
  227 00000224 F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de



ARM Macro Assembler    Page 8 


                                                             R0
  228 00000228         
  229 00000228 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  230 0000022C F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 0 (l√≥gica negada
                                                            )
  231 00000230 F003 0201       AND              R2, R3, #1  ; 
  232 00000234         
  233 00000234 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  234 00000238 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  235 0000023C F003 0201       AND              R2, R3, #1  ; 
  236 00000240         
  237 00000240 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  238 00000244 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  239 00000248 F003 0201       AND              R2, R3, #1  ; 
  240 0000024C         
  241 0000024C F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  242 00000250 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  243 00000254 F003 0201       AND              R2, R3, #1  ; 
  244 00000258 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  245 0000025A         
  246 0000025A         
  247 0000025A F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  248 0000025E F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  249 00000262 F003 0201       AND              R2, R3, #1  ; 
  250 00000266         
  251 00000266 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  252 0000026A F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  253 0000026E F003 0201       AND              R2, R3, #1  ; 
  254 00000272         
  255 00000272 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  256 00000276 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )



ARM Macro Assembler    Page 9 


  257 0000027A F003 0201       AND              R2, R3, #1  ; 
  258 0000027E         
  259 0000027E F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  260 00000282 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  261 00000286 F003 0201       AND              R2, R3, #1  ; 
  262 0000028A EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  263 0000028E         
  264 0000028E         
  265 0000028E F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  266 00000292 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  267 00000296 F003 0201       AND              R2, R3, #1
  268 0000029A         
  269 0000029A F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  270 0000029E F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  271 000002A2 F003 0201       AND              R2, R3, #1  ; 
  272 000002A6         
  273 000002A6 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  274 000002AA F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  275 000002AE F003 0201       AND              R2, R3, #1  ; 
  276 000002B2         
  277 000002B2 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  278 000002B6 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  279 000002BA F003 0201       AND              R2, R3, #1  ; 
  280 000002BE EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  281 000002C2         
  282 000002C2         
  283 000002C2 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  284 000002C6 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  285 000002CA F003 0201       AND              R2, R3, #1  ; 
  286 000002CE         
  287 000002CE F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  288 000002D2 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para



ARM Macro Assembler    Page 10 


                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  289 000002D6 F003 0201       AND              R2, R3, #1  ; 
  290 000002DA         
  291 000002DA F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  292 000002DE F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  293 000002E2 F003 0201       AND              R2, R3, #1  ; 
  294 000002E6 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  295 000002EA         
  296 000002EA 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  297 000002EC BF08            IT               EQ
  298 000002EE F445 7580       ORREQ            R5, R5, #0x100 ; Se for igual, 
                                                            seta o bit para lig
                                                            ar o led (d)
  299 000002F2         
  300 000002F2         
  301 000002F2 4770            BX               LR
  302 000002F4         
  303 000002F4         DefineLedE
  304 000002F4         ; Define o led (e) do display       ; MNOP
  305 000002F4 F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  306 000002F8         
  307 000002F8 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 4 d
                                                            e R0
  308 000002FC F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  309 00000300 F003 0201       AND              R2, R3, #1  ; 
  310 00000304         
  311 00000304 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 3 d
                                                            e R0
  312 00000308 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  313 0000030C F003 0201       AND              R2, R3, #1  ; 
  314 00000310         
  315 00000310 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 2 d
                                                            e R0
  316 00000314 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  317 00000318 F003 0201       AND              R2, R3, #1  ; 
  318 0000031C 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  319 0000031E         
  320 0000031E         
  321 0000031E F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0



ARM Macro Assembler    Page 11 


  322 00000322 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  323 00000326 F003 0201       AND              R2, R3, #1  ; 
  324 0000032A         
  325 0000032A F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  326 0000032E F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  327 00000332 F003 0201       AND              R2, R3, #1  ; 
  328 00000336         
  329 00000336 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 1 d
                                                            e R0
  330 0000033A F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  331 0000033E F003 0201       AND              R2, R3, #1  ; 
  332 00000342 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  333 00000346         
  334 00000346         
  335 00000346 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 2 d
                                                            e R0
  336 0000034A F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  337 0000034E F003 0201       AND              R2, R3, #1  ; 
  338 00000352         
  339 00000352 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  340 00000356 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  341 0000035A F003 0201       AND              R2, R3, #1  ; 
  342 0000035E EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  343 00000362         
  344 00000362 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  345 00000364 BF08            IT               EQ
  346 00000366 F445 7580       ORREQ            R5, R5, #0x100 ; Se for igual, 
                                                            seta o bit para lig
                                                            ar o led (e)
  347 0000036A         
  348 0000036A         
  349 0000036A 4770            BX               LR
  350 0000036C         
  351 0000036C         DefineLedF
  352 0000036C         ; Define o led (f) do display       ; MNOP
  353 0000036C F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  354 00000370         
  355 00000370 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d



ARM Macro Assembler    Page 12 


                                                            e R0
  356 00000374 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  357 00000378 F003 0201       AND              R2, R3, #1  ; 
  358 0000037C         
  359 0000037C F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  360 00000380 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  361 00000384 F003 0201       AND              R2, R3, #1  ; 
  362 00000388         
  363 00000388 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  364 0000038C F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  365 00000390 F003 0201       AND              R2, R3, #1  ; 
  366 00000394         
  367 00000394 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  368 00000398 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  369 0000039C F003 0201       AND              R2, R3, #1  ; 
  370 000003A0 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  371 000003A2         
  372 000003A2         
  373 000003A2 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  374 000003A6 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  375 000003AA F003 0201       AND              R2, R3, #1  ; 
  376 000003AE         
  377 000003AE F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  378 000003B2 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  379 000003B6 F003 0201       AND              R2, R3, #1  ; 
  380 000003BA         
  381 000003BA F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  382 000003BE F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  383 000003C2 F003 0201       AND              R2, R3, #1  ; 
  384 000003C6 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2



ARM Macro Assembler    Page 13 


  385 000003CA         
  386 000003CA         
  387 000003CA F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  388 000003CE F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  389 000003D2 F003 0201       AND              R2, R3, #1  ; 
  390 000003D6         
  391 000003D6 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  392 000003DA F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  393 000003DE F003 0201       AND              R2, R3, #1  ; 
  394 000003E2         
  395 000003E2 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  396 000003E6 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  397 000003EA F003 0201       AND              R2, R3, #1  ; 
  398 000003EE EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  399 000003F2         
  400 000003F2         
  401 000003F2 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  402 000003F6 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  403 000003FA F003 0201       AND              R2, R3, #1  ; 
  404 000003FE         
  405 000003FE F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  406 00000402 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  407 00000406 F003 0201       AND              R2, R3, #1  ; 
  408 0000040A         
  409 0000040A F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  410 0000040E F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  411 00000412 F003 0201       AND              R2, R3, #1  ; 
  412 00000416 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  413 0000041A         
  414 0000041A 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  415 0000041C BF08            IT               EQ
  416 0000041E F045 0501       ORREQ            R5, R5, #0x1 ; Se for igual, se



ARM Macro Assembler    Page 14 


                                                            ta o bit para ligar
                                                             o led (f)
  417 00000422         
  418 00000422         
  419 00000422 4770            BX               LR
  420 00000424         
  421 00000424         DefineLedG
  422 00000424         ; Define o led (g) do display       ; MNOP
  423 00000424 F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  424 00000428         
  425 00000428 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  426 0000042C F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  427 00000430 F003 0201       AND              R2, R3, #1  ; 
  428 00000434         
  429 00000434 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  430 00000438 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  431 0000043C F003 0201       AND              R2, R3, #1  ; 
  432 00000440         
  433 00000440 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  434 00000444 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  435 00000448 F003 0201       AND              R2, R3, #1  ; 
  436 0000044C         
  437 0000044C F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  438 00000450 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  439 00000454 F003 0201       AND              R2, R3, #1  ; 
  440 00000458 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  441 0000045A         
  442 0000045A         
  443 0000045A F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  444 0000045E F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  445 00000462 F003 0201       AND              R2, R3, #1  ; 
  446 00000466         
  447 00000466 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  448 0000046A F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada



ARM Macro Assembler    Page 15 


                                                            )
  449 0000046E F003 0201       AND              R2, R3, #1  ; 
  450 00000472         
  451 00000472 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  452 00000476 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  453 0000047A F003 0201       AND              R2, R3, #1  ; 
  454 0000047E         
  455 0000047E F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  456 00000482 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  457 00000486 F003 0201       AND              R2, R3, #1  ; 
  458 0000048A EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  459 0000048E         
  460 0000048E         
  461 0000048E F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  462 00000492 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  463 00000496 F003 0201       AND              R2, R3, #1  ; 
  464 0000049A         
  465 0000049A F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  466 0000049E F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  467 000004A2 F003 0201       AND              R2, R3, #1  ; 
  468 000004A6         
  469 000004A6 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  470 000004AA F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  471 000004AE F003 0201       AND              R2, R3, #1  ; 
  472 000004B2 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  473 000004B6         
  474 000004B6 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  475 000004B8 BF08            IT               EQ
  476 000004BA F045 0501       ORREQ            R5, R5, #0x1 ; Se for igual, se
                                                            ta o bit para ligar
                                                             o led (a)
  477 000004BE         
  478 000004BE 4770            BX               LR
  479 000004C0         
  480 000004C0         ;
  481 000004C0                 ALIGN                        ; garante que o fim



ARM Macro Assembler    Page 16 


                                                             da se√Ø¬ø¬Ω√Ø¬ø¬Ωo
                                                             est√Ø¬ø¬Ω alinhada
                                                             
  482 000004C0                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\defineleds.d -o.\objects\defineleds.o -IC:\Users\R
icar\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --prede
fine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 536" --predefine="TM4C
1294NCPDT SETA 1" --list=.\listings\defineleds.lst DefineLeds.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 9 in file DefineLeds.s
   Uses
      None
Comment: .text unused
DefineLedA 00000000

Symbol: DefineLedA
   Definitions
      At line 20 in file DefineLeds.s
   Uses
      At line 12 in file DefineLeds.s
Comment: DefineLedA used once
DefineLedB 000000DC

Symbol: DefineLedB
   Definitions
      At line 101 in file DefineLeds.s
   Uses
      At line 13 in file DefineLeds.s
Comment: DefineLedB used once
DefineLedC 00000194

Symbol: DefineLedC
   Definitions
      At line 170 in file DefineLeds.s
   Uses
      At line 14 in file DefineLeds.s
Comment: DefineLedC used once
DefineLedD 00000224

Symbol: DefineLedD
   Definitions
      At line 225 in file DefineLeds.s
   Uses
      At line 15 in file DefineLeds.s
Comment: DefineLedD used once
DefineLedE 000002F4

Symbol: DefineLedE
   Definitions
      At line 303 in file DefineLeds.s
   Uses
      At line 16 in file DefineLeds.s
Comment: DefineLedE used once
DefineLedF 0000036C

Symbol: DefineLedF
   Definitions
      At line 351 in file DefineLeds.s
   Uses
      At line 17 in file DefineLeds.s
Comment: DefineLedF used once
DefineLedG 00000424

Symbol: DefineLedG



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 421 in file DefineLeds.s
   Uses
      At line 18 in file DefineLeds.s
Comment: DefineLedG used once
8 symbols
342 symbols in table
