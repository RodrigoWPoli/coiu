


ARM Macro Assembler    Page 1 


    1 00000000         ; ------------------------------------------------------
                       -------------------------
    2 00000000                 THUMB                        ; Instru√É¬ß√É¬µes 
                                                            do tipo Thumb-2
    3 00000000         ; ------------------------------------------------------
                       -------------------------
    4 00000000         
    5 00000000         
    6 00000000         ; ------------------------------------------------------
                       -------------------------
    7 00000000         ; √É¬Årea de C√É¬≥digo - Tudo abaixo da diretiva a segui
                       r ser√É¬° armazenado na mem√É¬≥ria de 
    8 00000000         ;                  c√É¬≥digo
    9 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   10 00000000         
   11 00000000         ; Se alguma fun√É¬ß√É¬£o do arquivo for chamada em outro
                        arquivo 
   12 00000000                 EXPORT           DefineLedA
   13 00000000                 EXPORT           DefineLedB
   14 00000000                 EXPORT           DefineLedC
   15 00000000                 EXPORT           DefineLedD
   16 00000000                 EXPORT           DefineLedE
   17 00000000                 EXPORT           DefineLedF
   18 00000000                 EXPORT           DefineLedG
   19 00000000         
   20 00000000         DefineLedA
   21 00000000         ; Define o led (a) do display       ; MNOP
   22 00000000 B401            PUSH             {R0}
   23 00000002 F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
   24 00000006         
   25 00000006 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
   26 0000000A F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
   27 0000000E F003 0201       AND              R2, R3, #1  ; 
   28 00000012         
   29 00000012 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
   30 00000016 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
   31 0000001A F003 0201       AND              R2, R3, #1  ; 
   32 0000001E         
   33 0000001E F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
   34 00000022 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
   35 00000026 F003 0201       AND              R2, R3, #1  ; 
   36 0000002A         
   37 0000002A F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
   38 0000002E F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para



ARM Macro Assembler    Page 2 


                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
   39 00000032 F003 0201       AND              R2, R3, #1  ; 
   40 00000036 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
   41 00000038         
   42 00000038         
   43 00000038 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
   44 0000003C F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
   45 00000040 F003 0201       AND              R2, R3, #1  ; 
   46 00000044         
   47 00000044 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
   48 00000048 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
   49 0000004C F003 0201       AND              R2, R3, #1  ; 
   50 00000050         
   51 00000050 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
   52 00000054 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
   53 00000058 F003 0201       AND              R2, R3, #1  ; 
   54 0000005C         
   55 0000005C F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
   56 00000060 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
   57 00000064 F003 0201       AND              R2, R3, #1  ; 
   58 00000068 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
   59 0000006C         
   60 0000006C         
   61 0000006C F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
   62 00000070 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
   63 00000074 F003 0201       AND              R2, R3, #1  ; 
   64 00000078         
   65 00000078 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
   66 0000007C F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
   67 00000080 F003 0201       AND              R2, R3, #1  ; 
   68 00000084         



ARM Macro Assembler    Page 3 


   69 00000084 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
   70 00000088 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
   71 0000008C F003 0201       AND              R2, R3, #1  ; 
   72 00000090         
   73 00000090 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
   74 00000094 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
   75 00000098 F003 0201       AND              R2, R3, #1  ; 
   76 0000009C EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
   77 000000A0         
   78 000000A0         
   79 000000A0 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
   80 000000A4 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
   81 000000A8 F003 0201       AND              R2, R3, #1  ; 
   82 000000AC         
   83 000000AC F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
   84 000000B0 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
   85 000000B4 F003 0201       AND              R2, R3, #1  ; 
   86 000000B8         
   87 000000B8 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
   88 000000BC F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
   89 000000C0 F003 0201       AND              R2, R3, #1  ; 
   90 000000C4         
   91 000000C4 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
   92 000000C8 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
   93 000000CC F003 0201       AND              R2, R3, #1  ; 
   94 000000D0 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
   95 000000D4         
   96 000000D4 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
   97 000000D6 BF08            IT               EQ
   98 000000D8 F045 0501       ORREQ            R5, R5, #2_1 ; Se for igual, se
                                                            ta o bit para ligar
                                                             o led (a)



ARM Macro Assembler    Page 4 


   99 000000DC         
  100 000000DC BC01            POP              {R0}
  101 000000DE 4770            BX               LR
  102 000000E0         
  103 000000E0         DefineLedB
  104 000000E0         ; Define o led (b) do display       ; MNOP
  105 000000E0 B401            PUSH             {R0}
  106 000000E2 F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  107 000000E6         
  108 000000E6 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  109 000000EA F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  110 000000EE F003 0201       AND              R2, R3, #1  ; 
  111 000000F2         
  112 000000F2 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  113 000000F6 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  114 000000FA F003 0201       AND              R2, R3, #1  ; 
  115 000000FE         
  116 000000FE F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  117 00000102 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  118 00000106 F003 0201       AND              R2, R3, #1  ; 
  119 0000010A         
  120 0000010A F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  121 0000010E F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  122 00000112 F003 0201       AND              R2, R3, #1  ; 
  123 00000116 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  124 00000118         
  125 00000118         
  126 00000118 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  127 0000011C F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  128 00000120 F003 0201       AND              R2, R3, #1  ; 
  129 00000124         
  130 00000124 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  131 00000128 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )



ARM Macro Assembler    Page 5 


  132 0000012C F003 0201       AND              R2, R3, #1  ; 
  133 00000130         
  134 00000130 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  135 00000134 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  136 00000138 F003 0201       AND              R2, R3, #1  ; 
  137 0000013C EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  138 00000140         
  139 00000140         
  140 00000140 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  141 00000144 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  142 00000148 F003 0201       AND              R2, R3, #1  ; 
  143 0000014C         
  144 0000014C F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  145 00000150 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  146 00000154 F003 0201       AND              R2, R3, #1  ; 
  147 00000158         
  148 00000158 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  149 0000015C F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  150 00000160 F003 0201       AND              R2, R3, #1  ; 
  151 00000164 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  152 00000168         
  153 00000168         
  154 00000168 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  155 0000016C F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  156 00000170 F003 0201       AND              R2, R3, #1  ; 
  157 00000174         
  158 00000174 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  159 00000178 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  160 0000017C F003 0201       AND              R2, R3, #1  ; 
  161 00000180         
  162 00000180 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  163 00000184 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para



ARM Macro Assembler    Page 6 


                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  164 00000188 F003 0201       AND              R2, R3, #1  ; 
  165 0000018C EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  166 00000190         
  167 00000190 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  168 00000192 BF08            IT               EQ
  169 00000194 F045 0502       ORREQ            R5, R5, #2_10 ; Se for igual, s
                                                            eta o bit para liga
                                                            r o led (b)
  170 00000198         
  171 00000198 BC01            POP              {R0}
  172 0000019A 4770            BX               LR
  173 0000019C         
  174 0000019C         DefineLedC
  175 0000019C         ; Define o led (c) do display       ; MNOP
  176 0000019C B401            PUSH             {R0}
  177 0000019E F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  178 000001A2         
  179 000001A2 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  180 000001A6 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  181 000001AA F003 0201       AND              R2, R3, #1  ; 
  182 000001AE         
  183 000001AE F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  184 000001B2 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  185 000001B6 F003 0201       AND              R2, R3, #1  ; 
  186 000001BA         
  187 000001BA F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  188 000001BE F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  189 000001C2 F003 0201       AND              R2, R3, #1  ; 
  190 000001C6 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  191 000001C8         
  192 000001C8         
  193 000001C8 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  194 000001CC F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  195 000001D0 F003 0201       AND              R2, R3, #1  ; 
  196 000001D4         
  197 000001D4 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d



ARM Macro Assembler    Page 7 


                                                            e R0
  198 000001D8 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  199 000001DC F003 0201       AND              R2, R3, #1  ; 
  200 000001E0         
  201 000001E0 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  202 000001E4 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  203 000001E8 F003 0201       AND              R2, R3, #1  ; 
  204 000001EC EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  205 000001F0         
  206 000001F0         
  207 000001F0 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  208 000001F4 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  209 000001F8 F003 0201       AND              R2, R3, #1
  210 000001FC         
  211 000001FC F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  212 00000200 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  213 00000204 F003 0201       AND              R2, R3, #1  ; 
  214 00000208         
  215 00000208 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  216 0000020C F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  217 00000210 F003 0201       AND              R2, R3, #1  ; 
  218 00000214         
  219 00000214 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  220 00000218 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  221 0000021C F003 0201       AND              R2, R3, #1  ; 
  222 00000220 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  223 00000224         
  224 00000224 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  225 00000226 BF08            IT               EQ
  226 00000228 F045 0504       ORREQ            R5, R5, #2_100 ; Se for igual, 
                                                            seta o bit para lig
                                                            ar o led (c)
  227 0000022C         



ARM Macro Assembler    Page 8 


  228 0000022C BC01            POP              {R0}
  229 0000022E 4770            BX               LR
  230 00000230         
  231 00000230         DefineLedD
  232 00000230         ; Define o led (d) do display       ; MNOP
  233 00000230 B401            PUSH             {R0}
  234 00000232 F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  235 00000236         
  236 00000236 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  237 0000023A F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 0 (l√≥gica negada
                                                            )
  238 0000023E F003 0201       AND              R2, R3, #1  ; 
  239 00000242         
  240 00000242 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  241 00000246 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  242 0000024A F003 0201       AND              R2, R3, #1  ; 
  243 0000024E         
  244 0000024E F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  245 00000252 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  246 00000256 F003 0201       AND              R2, R3, #1  ; 
  247 0000025A         
  248 0000025A F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  249 0000025E F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  250 00000262 F003 0201       AND              R2, R3, #1  ; 
  251 00000266 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  252 00000268         
  253 00000268         
  254 00000268 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  255 0000026C F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  256 00000270 F003 0201       AND              R2, R3, #1  ; 
  257 00000274         
  258 00000274 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  259 00000278 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  260 0000027C F003 0201       AND              R2, R3, #1  ; 



ARM Macro Assembler    Page 9 


  261 00000280         
  262 00000280 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  263 00000284 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  264 00000288 F003 0201       AND              R2, R3, #1  ; 
  265 0000028C         
  266 0000028C F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  267 00000290 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  268 00000294 F003 0201       AND              R2, R3, #1  ; 
  269 00000298 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  270 0000029C         
  271 0000029C         
  272 0000029C F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  273 000002A0 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  274 000002A4 F003 0201       AND              R2, R3, #1
  275 000002A8         
  276 000002A8 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  277 000002AC F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  278 000002B0 F003 0201       AND              R2, R3, #1  ; 
  279 000002B4         
  280 000002B4 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  281 000002B8 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  282 000002BC F003 0201       AND              R2, R3, #1  ; 
  283 000002C0         
  284 000002C0 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  285 000002C4 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  286 000002C8 F003 0201       AND              R2, R3, #1  ; 
  287 000002CC EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  288 000002D0         
  289 000002D0         
  290 000002D0 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  291 000002D4 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √



ARM Macro Assembler    Page 10 


                                                            © 0 (l√≥gica negada
                                                            )
  292 000002D8 F003 0201       AND              R2, R3, #1  ; 
  293 000002DC         
  294 000002DC F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  295 000002E0 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  296 000002E4 F003 0201       AND              R2, R3, #1  ; 
  297 000002E8         
  298 000002E8 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  299 000002EC F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  300 000002F0 F003 0201       AND              R2, R3, #1  ; 
  301 000002F4 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  302 000002F8         
  303 000002F8 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  304 000002FA BF08            IT               EQ
  305 000002FC F045 0508       ORREQ            R5, R5, #2_1000 ; Se for igual,
                                                             seta o bit para li
                                                            gar o led (d)
  306 00000300         
  307 00000300 BC01            POP              {R0}
  308 00000302 4770            BX               LR
  309 00000304         
  310 00000304         DefineLedE
  311 00000304         ; Define o led (e) do display       ; MNOP
  312 00000304 B401            PUSH             {R0}
  313 00000306 F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  314 0000030A         
  315 0000030A F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 4 d
                                                            e R0
  316 0000030E F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  317 00000312 F003 0201       AND              R2, R3, #1  ; 
  318 00000316         
  319 00000316 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 3 d
                                                            e R0
  320 0000031A F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  321 0000031E F003 0201       AND              R2, R3, #1  ; 
  322 00000322         
  323 00000322 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 2 d
                                                            e R0
  324 00000326 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada



ARM Macro Assembler    Page 11 


                                                            )
  325 0000032A F003 0201       AND              R2, R3, #1  ; 
  326 0000032E 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  327 00000330         
  328 00000330         
  329 00000330 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  330 00000334 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  331 00000338 F003 0201       AND              R2, R3, #1  ; 
  332 0000033C         
  333 0000033C F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  334 00000340 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  335 00000344 F003 0201       AND              R2, R3, #1  ; 
  336 00000348         
  337 00000348 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 1 d
                                                            e R0
  338 0000034C F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  339 00000350 F003 0201       AND              R2, R3, #1  ; 
  340 00000354 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  341 00000358         
  342 00000358         
  343 00000358 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 2 d
                                                            e R0
  344 0000035C F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  345 00000360 F003 0201       AND              R2, R3, #1  ; 
  346 00000364         
  347 00000364 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  348 00000368 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  349 0000036C F003 0201       AND              R2, R3, #1  ; 
  350 00000370 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  351 00000374         
  352 00000374 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  353 00000376 BF08            IT               EQ
  354 00000378 F045 0510       ORREQ            R5, R5, #2_10000 ; Se for igual
                                                            , seta o bit para l
                                                            igar o led (e)
  355 0000037C         
  356 0000037C BC01            POP              {R0}



ARM Macro Assembler    Page 12 


  357 0000037E 4770            BX               LR
  358 00000380         
  359 00000380         DefineLedF
  360 00000380         ; Define o led (f) do display       ; MNOP
  361 00000380 B401            PUSH             {R0}
  362 00000382 F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  363 00000386         
  364 00000386 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  365 0000038A F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  366 0000038E F003 0201       AND              R2, R3, #1  ; 
  367 00000392         
  368 00000392 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  369 00000396 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  370 0000039A F003 0201       AND              R2, R3, #1  ; 
  371 0000039E         
  372 0000039E F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  373 000003A2 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  374 000003A6 F003 0201       AND              R2, R3, #1  ; 
  375 000003AA         
  376 000003AA F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  377 000003AE F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  378 000003B2 F003 0201       AND              R2, R3, #1  ; 
  379 000003B6 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  380 000003B8         
  381 000003B8         
  382 000003B8 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  383 000003BC F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  384 000003C0 F003 0201       AND              R2, R3, #1  ; 
  385 000003C4         
  386 000003C4 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  387 000003C8 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  388 000003CC F003 0201       AND              R2, R3, #1  ; 
  389 000003D0         



ARM Macro Assembler    Page 13 


  390 000003D0 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  391 000003D4 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  392 000003D8 F003 0201       AND              R2, R3, #1  ; 
  393 000003DC EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  394 000003E0         
  395 000003E0         
  396 000003E0 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  397 000003E4 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  398 000003E8 F003 0201       AND              R2, R3, #1  ; 
  399 000003EC         
  400 000003EC F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  401 000003F0 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  402 000003F4 F003 0201       AND              R2, R3, #1  ; 
  403 000003F8         
  404 000003F8 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  405 000003FC F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  406 00000400 F003 0201       AND              R2, R3, #1  ; 
  407 00000404 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  408 00000408         
  409 00000408         
  410 00000408 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  411 0000040C F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  412 00000410 F003 0201       AND              R2, R3, #1  ; 
  413 00000414         
  414 00000414 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  415 00000418 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  416 0000041C F003 0201       AND              R2, R3, #1  ; 
  417 00000420         
  418 00000420 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  419 00000424 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada



ARM Macro Assembler    Page 14 


                                                            )
  420 00000428 F003 0201       AND              R2, R3, #1  ; 
  421 0000042C EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  422 00000430         
  423 00000430 2C01            CMP              R4, #1      ; Compara o valor d
                                                            e R4 com 1
  424 00000432 BF08            IT               EQ
  425 00000434 F045 0520       ORREQ            R5, R5, #2_100000 ; Se for igua
                                                            l, seta o bit para 
                                                            ligar o led (f)
  426 00000438         
  427 00000438 BC01            POP              {R0}
  428 0000043A 4770            BX               LR
  429 0000043C         
  430 0000043C         DefineLedG
  431 0000043C         ; Define o led (g) do display       ; MNOP
  432 0000043C B401            PUSH             {R0}
  433 0000043E F000 000F       AND              R0, R0, #0xF ; Filtra os LSB de
                                                             R0
  434 00000442         
  435 00000442 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  436 00000446 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  437 0000044A F003 0201       AND              R2, R3, #1  ; 
  438 0000044E         
  439 0000044E F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  440 00000452 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  441 00000456 F003 0201       AND              R2, R3, #1  ; 
  442 0000045A         
  443 0000045A F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  444 0000045E F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  445 00000462 F003 0201       AND              R2, R3, #1  ; 
  446 00000466         
  447 00000466 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  448 0000046A F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  449 0000046E F003 0201       AND              R2, R3, #1  ; 
  450 00000472 4614            MOV              R4, R2      ; Salva o valor de 
                                                            R2 em R4
  451 00000474         
  452 00000474         
  453 00000474 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  454 00000478 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para



ARM Macro Assembler    Page 15 


                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  455 0000047C F003 0201       AND              R2, R3, #1  ; 
  456 00000480         
  457 00000480 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  458 00000484 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  459 00000488 F003 0201       AND              R2, R3, #1  ; 
  460 0000048C         
  461 0000048C F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  462 00000490 F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  463 00000494 F003 0201       AND              R2, R3, #1  ; 
  464 00000498         
  465 00000498 F000 0101       AND              R1, R0, #0x1 ; Filtra o bit 1 d
                                                            e R0
  466 0000049C F081 0300       EOR              R3, R1, #0  ; Compara√ß√£o para
                                                             saber se o bit 4 √
                                                            © 1 (l√≥gica negada
                                                            )
  467 000004A0 F003 0201       AND              R2, R3, #1  ; 
  468 000004A4 EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  469 000004A8         
  470 000004A8         
  471 000004A8 F000 0108       AND              R1, R0, #0x8 ; Filtra o bit 4 d
                                                            e R0
  472 000004AC F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 1 √
                                                            © 0 (l√≥gica negada
                                                            )
  473 000004B0 F003 0201       AND              R2, R3, #1  ; 
  474 000004B4         
  475 000004B4 F000 0104       AND              R1, R0, #0x4 ; Filtra o bit 3 d
                                                            e R0
  476 000004B8 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 2 √
                                                            © 0 (l√≥gica negada
                                                            )
  477 000004BC F003 0201       AND              R2, R3, #1  ; 
  478 000004C0         
  479 000004C0 F000 0102       AND              R1, R0, #0x2 ; Filtra o bit 2 d
                                                            e R0
  480 000004C4 F081 0301       EOR              R3, R1, #1  ; Compara√ß√£o para
                                                             saber se o bit 3 √
                                                            © 0 (l√≥gica negada
                                                            )
  481 000004C8 F003 0201       AND              R2, R3, #1  ; 
  482 000004CC EA44 0402       ORR              R4, R4, R2  ; Faz o OR de R4 co
                                                            m R2
  483 000004D0         
  484 000004D0 2C01            CMP              R4, #1      ; Compara o valor d



ARM Macro Assembler    Page 16 


                                                            e R4 com 1
  485 000004D2 BF08            IT               EQ
  486 000004D4 F045 0540       ORREQ            R5, R5, #2_1000000 ; Se for igu
                                                            al, seta o bit para
                                                             ligar o led (a)
  487 000004D8         
  488 000004D8 BC01            POP              {R0}
  489 000004DA 4770            BX               LR
  490 000004DC         
  491 000004DC         ;
  492 000004DC                 ALIGN                        ; garante que o fim
                                                             da se√Ø¬ø¬Ω√Ø¬ø¬Ωo
                                                             est√Ø¬ø¬Ω alinhada
                                                             
  493 000004DC                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\defineleds.d -o.\objects\defineleds.o -IC:\Users\R
icar\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --prede
fine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 536" --predefine="TM4C
1294NCPDT SETA 1" --list=.\listings\defineleds.lst DefineLeds.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 9 in file DefineLeds.s
   Uses
      None
Comment: .text unused
DefineLedA 00000000

Symbol: DefineLedA
   Definitions
      At line 20 in file DefineLeds.s
   Uses
      At line 12 in file DefineLeds.s
Comment: DefineLedA used once
DefineLedB 000000E0

Symbol: DefineLedB
   Definitions
      At line 103 in file DefineLeds.s
   Uses
      At line 13 in file DefineLeds.s
Comment: DefineLedB used once
DefineLedC 0000019C

Symbol: DefineLedC
   Definitions
      At line 174 in file DefineLeds.s
   Uses
      At line 14 in file DefineLeds.s
Comment: DefineLedC used once
DefineLedD 00000230

Symbol: DefineLedD
   Definitions
      At line 231 in file DefineLeds.s
   Uses
      At line 15 in file DefineLeds.s
Comment: DefineLedD used once
DefineLedE 00000304

Symbol: DefineLedE
   Definitions
      At line 310 in file DefineLeds.s
   Uses
      At line 16 in file DefineLeds.s
Comment: DefineLedE used once
DefineLedF 00000380

Symbol: DefineLedF
   Definitions
      At line 359 in file DefineLeds.s
   Uses
      At line 17 in file DefineLeds.s
Comment: DefineLedF used once
DefineLedG 0000043C

Symbol: DefineLedG



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 430 in file DefineLeds.s
   Uses
      At line 18 in file DefineLeds.s
Comment: DefineLedG used once
8 symbols
342 symbols in table
