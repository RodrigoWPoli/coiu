


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Jhony Minetto Araújo, Ricardo Marthus Gremmelmaier, R
                       odrigo Wolsky Poli
    4 00000000         ; Última atualização: 11/11/2024
    5 00000000         ; Este programa deve esperar o usu�rio pressionar uma 
                       chave.
    6 00000000         ; Caso o usuário pressione uma chave, um LED deve pisca
                       r a cada 1 segundo.
    7 00000000         
    8 00000000         ; ------------------------------------------------------
                       -------------------------
    9 00000000                 THUMB                        ; Instru��es do
                                                             tipo Thumb-2
   10 00000000         ; ------------------------------------------------------
                       -------------------------
   11 00000000         
   12 00000000         ; Declarações EQU - Defines
   13 00000000         ;<NOME>         EQU <VALOR>
   14 00000000         ; ========================
   15 00000000         ; Definições de Valores
   16 00000000         
   17 00000000         
   18 00000000         ; ------------------------------------------------------
                       -------------------------
   19 00000000         ; �rea de Dados - Declarações de vari�veis
   20 00000000                 AREA             DATA, ALIGN=2
   21 00000000         ; Se alguma variável for chamada em outro arquivo
   22 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   23 00000000         ; partir de outro arquivo
   24 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   25 00000000         ; de <tam> bytes a partir da primeira 
   26 00000000         ; posição da RAM  
   27 00000000         
   28 00000000         ; ------------------------------------------------------
                       -------------------------
   29 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir se
                       rá armazenado na memória de 
   30 00000000         ;                  código
   31 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   32 00000000         
   33 00000000         ; Se alguma função do arquivo for chamada em outro arq
                       uivo 
   34 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a pa
                                                            rtir de 
   35 00000000         ; outro arquivo. No caso startup.s
   36 00000000         
   37 00000000         ; Se chamar alguma função externa 
   38 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   39 00000000         ; função <func>
   40 00000000                 IMPORT           PLL_Init
   41 00000000                 IMPORT           SysTick_Init
   42 00000000                 IMPORT           SysTick_Wait1ms
   43 00000000                 IMPORT           GPIO_Init



ARM Macro Assembler    Page 2 


   44 00000000                 IMPORT           Led_Output
   45 00000000                 IMPORT           Switch_Input
   46 00000000                 IMPORT           Display_Output
   47 00000000         ; ------------------------------------------------------
                       -------------------------
   48 00000000         ; Função main()
   49 00000000         Start
   50 00000000         ; Comece o código aqui <===============================
                       =======================
   51 00000000         
   52 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   53 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   54 00000008 F7FF FFFE       BL               GPIO_Init   ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   55 0000000C         
   56 0000000C         ; R0 -> Contador
   57 0000000C         ; R3 -> Leitura da Switch
   58 0000000C         ; R7 -> Contador para Taxa de atualização
   59 0000000C         ; R8 -> Valor da Switch anterior
   60 0000000C         ; R9 -> Passo a ser incrementado no contador
   61 0000000C         ; R2 -> Quantidade de ticks de ms
   62 0000000C F04F 0000       MOV              R0, #0      ; Contador iniciand
                                                            o em 0
   63 00000010 F44F 72FA       MOV              R2, #500    ; Tempo para trocar
                                                             o contador
   64 00000014 F04F 0901       MOV              R9, #1      ; Passo iniciando e
                                                            m 0
   65 00000018 F04F 0803       MOV              R8, #2_11   ; Inicia com as dua
                                                            s switches inativas
                                                            
   66 0000001C         
   67 0000001C         MainLoop
   68 0000001C F000 F84B       BL               PrintValue  ; Chamada pra mostr
                                                            ar os displays e le
                                                            ds
   69 00000020 F7FF FFFE       BL               Switch_Input ; Chamada pra ler 
                                                            o switch
   70 00000024 B408            PUSH             {R3}        ; Salvar o valor da
                                                             switch
   71 00000026         CounterLoop
   72 00000026 2B03            CMP              R3, #2_11   ; Se nenhum switch 
                                                            for ativo, apenas i
                                                            ncrementa ou decrem
                                                            enta o contador
   73 00000028 D107            BNE              Step_handler
   74 0000002A 4448            ADD              R0, R9      ; Incrementa o cont
                                                            ador
   75 0000002C 2800            CMP              R0, #0      ; Compara para ver 
                                                            se nao ficou abaixo
                                                             de zero
   76 0000002E DB24            BLT              CheckUnderflow
   77 00000030 2899            CMP              R0, #0x99   ; Compara para ver 
                                                            se nao ficou acima 



ARM Macro Assembler    Page 3 


                                                            de 100
   78 00000032 DC25            BGT              CheckOverflow
   79 00000034         
   80 00000034 F85D 8B04       POP              {R8}        ; Salvar o valor da
                                                             switch
   81 00000038 E7F0            B                MainLoop
   82 0000003A         
   83 0000003A         Step_handler
   84 0000003A 2B02            CMP              R3, #2_10   ; Se tiver SW1 ativ
                                                            a, incrementa o pas
                                                            so ou decrementa
   85 0000003C D106            BNE              Neg_handler
   86 0000003E         
   87 0000003E F018 0F01       TST              R8, #1      ; Se o ultimo bit e
                                                            ra 0, volta para o 
                                                            loop
   88 00000042 D0EB            BEQ              MainLoop    ; Se nao, pode cont
                                                            inuar
   89 00000044         
   90 00000044 F1B9 0F00       CMP              R9, #0      ; Verifica se é ne
                                                            gativo e se for, de
                                                            crementa o passo
   91 00000048 D427            BMI              DecrementStep
   92 0000004A E01C            B                IncrementStep ; Se nao for, inc
                                                            rementa o passo
   93 0000004C         
   94 0000004C         Neg_handler
   95 0000004C 2B01            CMP              R3, #2_01   ; Se tiver SW2 ativ
                                                            a, inverte o contad
                                                            or negativando o pa
                                                            sso
   96 0000004E D109            BNE              Both_handler
   97 00000050         
   98 00000050 F018 0F02       TST              R8, #2      ; Se o penúltimo b
                                                            it era 0, volta par
                                                            a o loop
   99 00000054 D0E2            BEQ              MainLoop    ; Se nao, pode cont
                                                            inuar
  100 00000056         
  101 00000056 F018 0F00       TST              R8, #2_00   ; Se o penultimo bi
                                                            t era 0, volta para
                                                             o loop
  102 0000005A F1C9 0900       NEG              R9, R9      ; Negativa o passo
  103 0000005E F85D 8B04       POP              {R8}        ; Atualizo valor sa
                                                            lvo da switch
  104 00000062 E7DB            B                MainLoop
  105 00000064         
  106 00000064         Both_handler
  107 00000064 2B00            CMP              R3, #2_00   ; Se as duas SW for
                                                            em ativas, realiza 
                                                            as duas ações
  108 00000066 D1D9            BNE              MainLoop
  109 00000068         
  110 00000068 F018 0F03       TST              R8, #3      ; Se os ultimos 2 b
                                                            its eram 0, volta p
                                                            ara o loop
  111 0000006C D0D6            BEQ              MainLoop    ; Se nao, pode cont
                                                            inuar
  112 0000006E         



ARM Macro Assembler    Page 4 


  113 0000006E F1C9 0900       NEG              R9, R9      ; Negativa o valor
  114 00000072 F1B9 0F00       CMP              R9, #0      ; Verifica se é ne
                                                            gativo e se for, de
                                                            crementa o passo
  115 00000076 D410            BMI              DecrementStep
  116 00000078 E005            B                IncrementStep ; Se nao for, inc
                                                            rementa o passo
  117 0000007A         
  118 0000007A         CheckUnderflow
  119 0000007A F04F 0099       MOV              R0, #0x99
  120 0000007E E7CD            B                MainLoop
  121 00000080         
  122 00000080         CheckOverflow
  123 00000080 F04F 0000       MOV              R0, #0
  124 00000084 E7CA            B                MainLoop
  125 00000086         
  126 00000086         IncrementStep
  127 00000086 F1B9 0F09       CMP              R9, #9      ; Compara se o pass
                                                            o está no limite s
                                                            uperior (9)     
  128 0000008A BFB4            ITE              LT
  129 0000008C F109 0901       ADDLT            R9, #1      ; Caso seja menor q
                                                            ue 9, adiciona 1
  130 00000090 F04F 0901       MOVGE            R9, #1      ; Caso seja 9 ou ma
                                                            ior, seta para 1
  131 00000094 F85D 8B04       POP              {R8}        ; Atualizo valor sa
                                                            lvo da switch
  132 00000098 E7C0            B                MainLoop
  133 0000009A         
  134 0000009A         DecrementStep
  135 0000009A F1C9 0900       NEG              R9, R9      ; Torna o valor pos
                                                            itivo
  136 0000009E F1B9 0F01       CMP              R9, #1      ; Compara se o pass
                                                            o está no limite i
                                                            nferior (1)
  137 000000A2 BFCC            ITE              GT
  138 000000A4 F1A9 0901       SUBGT            R9, #1      ; Caso seja maior q
                                                            ue 1, reduz 1
  139 000000A8 F04F 0909       MOVLE            R9, #9      ; Caso seja igual o
                                                            u menor a 1, seta p
                                                            ara 9
  140 000000AC F1C9 0900       NEG              R9, R9      ; Torna o valor neg
                                                            ativo novamente
  141 000000B0 F85D 8B04       POP              {R8}        ; Atualizo valor sa
                                                            lvo da switch
  142 000000B4 E7B2            B                MainLoop
  143 000000B6         
  144 000000B6         PrintValue
  145 000000B6 F04F 0700       MOV              R7, #0
  146 000000BA B500            PUSH             {LR}        ; Salva o Link Regi
                                                            ster
  147 000000BC         AtualizaFrames
  148 000000BC         
  149 000000BC B401            PUSH             {R0}        ; Salva o R0
  150 000000BE F7FF FFFE       BL               Led_Output  ; Grava na placa os
                                                             Leds
  151 000000C2 BC01            POP              {R0}        ; Retorna o R0
  152 000000C4 F7FF FFFE       BL               Display_Output ; Grava na placa
                                                             os displays



ARM Macro Assembler    Page 5 


  153 000000C8         
  154 000000C8 F107 0701       ADD              R7, #1      ; Adiciona um no co
                                                            ntador
  155 000000CC 2F3C            CMP              R7, #60     ; Verifica se deu 6
                                                            0 frames
  156 000000CE D1F5            BNE              AtualizaFrames ; Enquanto nao c
                                                            hegar a 60, repete
  157 000000D0         
  158 000000D0 F85D EB04       POP              {LR}        ; Volta o Link Regi
                                                            ster
  159 000000D4 4770            BX               LR
  160 000000D6         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  161 000000D6         ; Fim do Arquivo
  162 000000D6         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  163 000000D6 00 00           ALIGN                        ;Garante que o fim 
                                                            da se��o est�
                                                             alinhada 
  164 000000D8                 END                          ;Fim do arquivo
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\main.d -o.\objects\main.o -IC:\Users\Ricar\AppData
\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL
 SETA 1" --predefine="__UVISION_VERSION SETA 536" --predefine="TM4C1294NCPDT SE
TA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 20 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 31 in file main.s
   Uses
      None
Comment: .text unused
AtualizaFrames 000000BC

Symbol: AtualizaFrames
   Definitions
      At line 147 in file main.s
   Uses
      At line 156 in file main.s
Comment: AtualizaFrames used once
Both_handler 00000064

Symbol: Both_handler
   Definitions
      At line 106 in file main.s
   Uses
      At line 96 in file main.s
Comment: Both_handler used once
CheckOverflow 00000080

Symbol: CheckOverflow
   Definitions
      At line 122 in file main.s
   Uses
      At line 78 in file main.s
Comment: CheckOverflow used once
CheckUnderflow 0000007A

Symbol: CheckUnderflow
   Definitions
      At line 118 in file main.s
   Uses
      At line 76 in file main.s
Comment: CheckUnderflow used once
CounterLoop 00000026

Symbol: CounterLoop
   Definitions
      At line 71 in file main.s
   Uses
      None
Comment: CounterLoop unused
DecrementStep 0000009A

Symbol: DecrementStep
   Definitions
      At line 134 in file main.s
   Uses
      At line 91 in file main.s
      At line 115 in file main.s

IncrementStep 00000086




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: IncrementStep
   Definitions
      At line 126 in file main.s
   Uses
      At line 92 in file main.s
      At line 116 in file main.s

MainLoop 0000001C

Symbol: MainLoop
   Definitions
      At line 67 in file main.s
   Uses
      At line 81 in file main.s
      At line 88 in file main.s
      At line 99 in file main.s
      At line 104 in file main.s
      At line 108 in file main.s
      At line 111 in file main.s
      At line 120 in file main.s
      At line 124 in file main.s
      At line 132 in file main.s
      At line 142 in file main.s

Neg_handler 0000004C

Symbol: Neg_handler
   Definitions
      At line 94 in file main.s
   Uses
      At line 85 in file main.s
Comment: Neg_handler used once
PrintValue 000000B6

Symbol: PrintValue
   Definitions
      At line 144 in file main.s
   Uses
      At line 68 in file main.s
Comment: PrintValue used once
Start 00000000

Symbol: Start
   Definitions
      At line 49 in file main.s
   Uses
      At line 34 in file main.s
Comment: Start used once
Step_handler 0000003A

Symbol: Step_handler
   Definitions
      At line 83 in file main.s
   Uses
      At line 73 in file main.s
Comment: Step_handler used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Display_Output 00000000

Symbol: Display_Output
   Definitions
      At line 46 in file main.s
   Uses
      At line 152 in file main.s
Comment: Display_Output used once
GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 43 in file main.s
   Uses
      At line 54 in file main.s
Comment: GPIO_Init used once
Led_Output 00000000

Symbol: Led_Output
   Definitions
      At line 44 in file main.s
   Uses
      At line 150 in file main.s
Comment: Led_Output used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 40 in file main.s
   Uses
      At line 52 in file main.s
Comment: PLL_Init used once
Switch_Input 00000000

Symbol: Switch_Input
   Definitions
      At line 45 in file main.s
   Uses
      At line 69 in file main.s
Comment: Switch_Input used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 41 in file main.s
   Uses
      At line 53 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 42 in file main.s
   Uses
      None
Comment: SysTick_Wait1ms unused
7 symbols
355 symbols in table
