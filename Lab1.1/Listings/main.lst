


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Jhony Minetto Araújo, Ricardo Marthus Gremmelmaier, R
                       odrigo Wolsky Poli
    4 00000000         ; Última atualização: 11/11/2024
    5 00000000         ; Este programa deve esperar o usu�rio pressionar uma 
                       chave.
    6 00000000         ; Caso o usuário pressione uma chave, um LED deve pisca
                       r a cada 1 segundo.
    7 00000000         
    8 00000000         ; ------------------------------------------------------
                       -------------------------
    9 00000000                 THUMB                        ; Instru��es do
                                                             tipo Thumb-2
   10 00000000         ; ------------------------------------------------------
                       -------------------------
   11 00000000         
   12 00000000         ; Declarações EQU - Defines
   13 00000000         ;<NOME>         EQU <VALOR>
   14 00000000         ; ========================
   15 00000000         ; Definições de Valores
   16 00000000         
   17 00000000         
   18 00000000         ; ------------------------------------------------------
                       -------------------------
   19 00000000         ; �rea de Dados - Declarações de vari�veis
   20 00000000                 AREA             DATA, ALIGN=2
   21 00000000         ; Se alguma variável for chamada em outro arquivo
   22 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   23 00000000         ; partir de outro arquivo
   24 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   25 00000000         ; de <tam> bytes a partir da primeira 
   26 00000000         ; posição da RAM  
   27 00000000         
   28 00000000         ; ------------------------------------------------------
                       -------------------------
   29 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir se
                       rá armazenado na memória de 
   30 00000000         ;                  código
   31 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   32 00000000         
   33 00000000         ; Se alguma função do arquivo for chamada em outro arq
                       uivo 
   34 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a pa
                                                            rtir de 
   35 00000000         ; outro arquivo. No caso startup.s
   36 00000000         
   37 00000000         ; Se chamar alguma função externa 
   38 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   39 00000000         ; função <func>
   40 00000000                 IMPORT           PLL_Init
   41 00000000                 IMPORT           SysTick_Init
   42 00000000                 IMPORT           SysTick_Wait1ms
   43 00000000                 IMPORT           GPIO_Init



ARM Macro Assembler    Page 2 


   44 00000000                 IMPORT           Led_Output
   45 00000000                 IMPORT           Switch_Input
   46 00000000                 IMPORT           Display_Output
   47 00000000         ; ------------------------------------------------------
                       -------------------------
   48 00000000         ; Função main()
   49 00000000         Start
   50 00000000         ; Comece o código aqui <===============================
                       =======================
   51 00000000         
   52 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   53 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   54 00000008 F7FF FFFE       BL               GPIO_Init   ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   55 0000000C         
   56 0000000C F04F 0000       MOV              R0, #0
   57 00000010 F7FF FFFE       BL               Display_Output
   58 00000014         
   59 00000014 F04F 0001       MOV              R0, #1
   60 00000018 F7FF FFFE       BL               Display_Output
   61 0000001C         
   62 0000001C F04F 0002       MOV              R0, #2
   63 00000020 F7FF FFFE       BL               Display_Output
   64 00000024         
   65 00000024 F04F 0003       MOV              R0, #3
   66 00000028 F7FF FFFE       BL               Display_Output
   67 0000002C         
   68 0000002C F04F 0004       MOV              R0, #4
   69 00000030 F7FF FFFE       BL               Display_Output
   70 00000034         
   71 00000034 F04F 0005       MOV              R0, #5
   72 00000038 F7FF FFFE       BL               Display_Output
   73 0000003C         
   74 0000003C F04F 0006       MOV              R0, #6
   75 00000040 F7FF FFFE       BL               Display_Output
   76 00000044         
   77 00000044 F04F 0007       MOV              R0, #7
   78 00000048 F7FF FFFE       BL               Display_Output
   79 0000004C         
   80 0000004C F04F 0008       MOV              R0, #8
   81 00000050 F7FF FFFE       BL               Display_Output
   82 00000054         
   83 00000054 F04F 0009       MOV              R0, #9
   84 00000058 F7FF FFFE       BL               Display_Output
   85 0000005C         
   86 0000005C F04F 000A       MOV              R0, #10
   87 00000060 F7FF FFFE       BL               Display_Output
   88 00000064         
   89 00000064 F04F 000B       MOV              R0, #11
   90 00000068 F7FF FFFE       BL               Display_Output
   91 0000006C         
   92 0000006C F04F 000C       MOV              R0, #12
   93 00000070 F7FF FFFE       BL               Display_Output



ARM Macro Assembler    Page 3 


   94 00000074         
   95 00000074 F04F 000D       MOV              R0, #13
   96 00000078 F7FF FFFE       BL               Display_Output
   97 0000007C         
   98 0000007C F04F 000E       MOV              R0, #14
   99 00000080 F7FF FFFE       BL               Display_Output
  100 00000084         
  101 00000084 F04F 000F       MOV              R0, #15
  102 00000088 F7FF FFFE       BL               Display_Output
  103 0000008C         
  104 0000008C F04F 00C2       MOV              R0, #2_11000010
  105 00000090 F7FF FFFE       BL               Display_Output
  106 00000094         
  107 00000094 F04F 00FF       MOV              R0, #2_11111111 ; 0xFF
  108 00000098 F7FF FFFE       BL               Display_Output
  109 0000009C         
  110 0000009C         ; R0 -> Contador
  111 0000009C         ; R3 -> Leitura da Switch
  112 0000009C         ; R8 -> Valor da Switch anterior
  113 0000009C         ; R9 -> Passo a ser incrementado no contador
  114 0000009C         ; R2 -> Quantidade de ticks de ms
  115 0000009C F04F 0000       MOV              R0, #0      ; Contador iniciand
                                                            o em 0
  116 000000A0 F44F 72FA       MOV              R2, #500    ; Tempo para trocar
                                                             o contador
  117 000000A4 F04F 0901       MOV              R9, #1      ; Passo iniciando e
                                                            m 0
  118 000000A8 F04F 0803       MOV              R8, #2_11   ; Inicia com as dua
                                                            s switches inativas
                                                            
  119 000000AC         
  120 000000AC         MainLoop
  121 000000AC F000 F84B       BL               PrintValue  ; Chamada pra mostr
                                                            ar os displays e le
                                                            ds
  122 000000B0 F7FF FFFE       BL               Switch_Input ; Chamada pra ler 
                                                            o switch
  123 000000B4 B408            PUSH             {R3}        ; Salvar o valor da
                                                             switch
  124 000000B6         CounterLoop
  125 000000B6 2B03            CMP              R3, #2_11   ; Se nenhum switch 
                                                            for ativo, apenas i
                                                            ncrementa ou decrem
                                                            enta o contador
  126 000000B8 D107            BNE              Step_handler
  127 000000BA 4448            ADD              R0, R9      ; Incrementa o cont
                                                            ador
  128 000000BC 2800            CMP              R0, #0      ; Compara para ver 
                                                            se nao ficou abaixo
                                                             de zero
  129 000000BE DB24            BLT              CheckUnderflow
  130 000000C0 2863            CMP              R0, #99     ; Compara para ver 
                                                            se nao ficou acima 
                                                            de 100
  131 000000C2 DC25            BGT              CheckOverflow
  132 000000C4         
  133 000000C4 F85D 8B04       POP              {R8}        ; Salvar o valor da
                                                             switch
  134 000000C8 E7F0            B                MainLoop



ARM Macro Assembler    Page 4 


  135 000000CA         
  136 000000CA         Step_handler
  137 000000CA 2B02            CMP              R3, #2_10   ; Se tiver SW1 ativ
                                                            a, incrementa o pas
                                                            so ou decrementa
  138 000000CC D106            BNE              Neg_handler
  139 000000CE         
  140 000000CE F018 0F01       TST              R8, #1      ; Se o ultimo bit e
                                                            ra 0, volta para o 
                                                            loop
  141 000000D2 D0EB            BEQ              MainLoop    ; Se nao, pode cont
                                                            inuar
  142 000000D4         
  143 000000D4 F1B9 0F00       CMP              R9, #0      ; Verifica se é ne
                                                            gativo e se for, de
                                                            crementa o passo
  144 000000D8 D427            BMI              DecrementStep
  145 000000DA E01C            B                IncrementStep ; Se nao for, inc
                                                            rementa o passo
  146 000000DC         
  147 000000DC         Neg_handler
  148 000000DC 2B01            CMP              R3, #2_01   ; Se tiver SW2 ativ
                                                            a, inverte o contad
                                                            or negativando o pa
                                                            sso
  149 000000DE D109            BNE              Both_handler
  150 000000E0         
  151 000000E0 F018 0F02       TST              R8, #2      ; Se o penúltimo b
                                                            it era 0, volta par
                                                            a o loop
  152 000000E4 D0E2            BEQ              MainLoop    ; Se nao, pode cont
                                                            inuar
  153 000000E6         
  154 000000E6 F018 0F00       TST              R8, #2_00   ; Se o penultimo bi
                                                            t era 0, volta para
                                                             o loop
  155 000000EA F1C9 0900       NEG              R9, R9      ; Negativa o passo
  156 000000EE F85D 8B04       POP              {R8}        ; Atualizo valor sa
                                                            lvo da switch
  157 000000F2 E7DB            B                MainLoop
  158 000000F4         
  159 000000F4         Both_handler
  160 000000F4 2B00            CMP              R3, #2_00   ; Se as duas SW for
                                                            em ativas, realiza 
                                                            as duas ações
  161 000000F6 D1D9            BNE              MainLoop
  162 000000F8         
  163 000000F8 F018 0F03       TST              R8, #3      ; Se os ultimos 2 b
                                                            its eram 0, volta p
                                                            ara o loop
  164 000000FC D0D6            BEQ              MainLoop    ; Se nao, pode cont
                                                            inuar
  165 000000FE         
  166 000000FE F1C9 0900       NEG              R9, R9      ; Negativa o valor
  167 00000102 F1B9 0F00       CMP              R9, #0      ; Verifica se é ne
                                                            gativo e se for, de
                                                            crementa o passo
  168 00000106 D410            BMI              DecrementStep
  169 00000108 E005            B                IncrementStep ; Se nao for, inc



ARM Macro Assembler    Page 5 


                                                            rementa o passo
  170 0000010A         
  171 0000010A         CheckUnderflow
  172 0000010A F04F 0063       MOV              R0, #99
  173 0000010E E7CD            B                MainLoop
  174 00000110         
  175 00000110         CheckOverflow
  176 00000110 F04F 0000       MOV              R0, #0
  177 00000114 E7CA            B                MainLoop
  178 00000116         
  179 00000116         IncrementStep
  180 00000116 F1B9 0F09       CMP              R9, #9      ; Compara se o pass
                                                            o está no limite s
                                                            uperior (9)     
  181 0000011A BFB4            ITE              LT
  182 0000011C F109 0901       ADDLT            R9, #1      ; Caso seja menor q
                                                            ue 9, adiciona 1
  183 00000120 F04F 0901       MOVGE            R9, #1      ; Caso seja 9 ou ma
                                                            ior, seta para 1
  184 00000124 F85D 8B04       POP              {R8}        ; Atualizo valor sa
                                                            lvo da switch
  185 00000128 E7C0            B                MainLoop
  186 0000012A         
  187 0000012A         DecrementStep
  188 0000012A F1C9 0900       NEG              R9, R9      ; Torna o valor pos
                                                            itivo
  189 0000012E F1B9 0F01       CMP              R9, #1      ; Compara se o pass
                                                            o está no limite i
                                                            nferior (1)
  190 00000132 BFCC            ITE              GT
  191 00000134 F1A9 0901       SUBGT            R9, #1      ; Caso seja maior q
                                                            ue 1, reduz 1
  192 00000138 F04F 0909       MOVLE            R9, #9      ; Caso seja igual o
                                                            u menor a 1, seta p
                                                            ara 9
  193 0000013C F1C9 0900       NEG              R9, R9      ; Torna o valor neg
                                                            ativo novamente
  194 00000140 F85D 8B04       POP              {R8}        ; Atualizo valor sa
                                                            lvo da switch
  195 00000144 E7B2            B                MainLoop
  196 00000146         
  197 00000146         PrintValue
  198 00000146 B500            PUSH             {LR}        ; Salva o Link Regi
                                                            ster
  199 00000148 F7FF FFFE       BL               Led_Output  ; Grava na placa os
                                                             Leds
  200 0000014C         ; BL Display_Output    ; Grava na placa os displays
  201 0000014C F85D EB04       POP              {LR}        ; Volta o Link Regi
                                                            ster
  202 00000150 4770            BX               LR
  203 00000152         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  204 00000152         ; Fim do Arquivo
  205 00000152         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  206 00000152 00 00           ALIGN                        ;Garante que o fim 
                                                            da se��o est�



ARM Macro Assembler    Page 6 


                                                             alinhada 
  207 00000154                 END                          ;Fim do arquivo
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\main.d -o.\objects\main.o -IC:\Users\Ricar\AppData
\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL
 SETA 1" --predefine="__UVISION_VERSION SETA 536" --predefine="TM4C1294NCPDT SE
TA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 20 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 31 in file main.s
   Uses
      None
Comment: .text unused
Both_handler 000000F4

Symbol: Both_handler
   Definitions
      At line 159 in file main.s
   Uses
      At line 149 in file main.s
Comment: Both_handler used once
CheckOverflow 00000110

Symbol: CheckOverflow
   Definitions
      At line 175 in file main.s
   Uses
      At line 131 in file main.s
Comment: CheckOverflow used once
CheckUnderflow 0000010A

Symbol: CheckUnderflow
   Definitions
      At line 171 in file main.s
   Uses
      At line 129 in file main.s
Comment: CheckUnderflow used once
CounterLoop 000000B6

Symbol: CounterLoop
   Definitions
      At line 124 in file main.s
   Uses
      None
Comment: CounterLoop unused
DecrementStep 0000012A

Symbol: DecrementStep
   Definitions
      At line 187 in file main.s
   Uses
      At line 144 in file main.s
      At line 168 in file main.s

IncrementStep 00000116

Symbol: IncrementStep
   Definitions
      At line 179 in file main.s
   Uses
      At line 145 in file main.s
      At line 169 in file main.s

MainLoop 000000AC



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: MainLoop
   Definitions
      At line 120 in file main.s
   Uses
      At line 134 in file main.s
      At line 141 in file main.s
      At line 152 in file main.s
      At line 157 in file main.s
      At line 161 in file main.s
      At line 164 in file main.s
      At line 173 in file main.s
      At line 177 in file main.s
      At line 185 in file main.s
      At line 195 in file main.s

Neg_handler 000000DC

Symbol: Neg_handler
   Definitions
      At line 147 in file main.s
   Uses
      At line 138 in file main.s
Comment: Neg_handler used once
PrintValue 00000146

Symbol: PrintValue
   Definitions
      At line 197 in file main.s
   Uses
      At line 121 in file main.s
Comment: PrintValue used once
Start 00000000

Symbol: Start
   Definitions
      At line 49 in file main.s
   Uses
      At line 34 in file main.s
Comment: Start used once
Step_handler 000000CA

Symbol: Step_handler
   Definitions
      At line 136 in file main.s
   Uses
      At line 126 in file main.s
Comment: Step_handler used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Display_Output 00000000

Symbol: Display_Output
   Definitions
      At line 46 in file main.s
   Uses
      At line 57 in file main.s
      At line 60 in file main.s
      At line 63 in file main.s
      At line 66 in file main.s
      At line 69 in file main.s
      At line 72 in file main.s
      At line 75 in file main.s
      At line 78 in file main.s
      At line 81 in file main.s
      At line 84 in file main.s
      At line 87 in file main.s
      At line 90 in file main.s
      At line 93 in file main.s
      At line 96 in file main.s
      At line 99 in file main.s
      At line 102 in file main.s
      At line 105 in file main.s
      At line 108 in file main.s

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 43 in file main.s
   Uses
      At line 54 in file main.s
Comment: GPIO_Init used once
Led_Output 00000000

Symbol: Led_Output
   Definitions
      At line 44 in file main.s
   Uses
      At line 199 in file main.s
Comment: Led_Output used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 40 in file main.s
   Uses
      At line 52 in file main.s
Comment: PLL_Init used once
Switch_Input 00000000

Symbol: Switch_Input
   Definitions
      At line 45 in file main.s
   Uses
      At line 122 in file main.s
Comment: Switch_Input used once
SysTick_Init 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: SysTick_Init
   Definitions
      At line 41 in file main.s
   Uses
      At line 53 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 42 in file main.s
   Uses
      None
Comment: SysTick_Wait1ms unused
7 symbols
354 symbols in table
