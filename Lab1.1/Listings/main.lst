


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Jhony Minetto Araújo, Ricardo Marthus Gremmelmaier, R
                       odrigo Wolsky Poli
    4 00000000         ; Última atualização: 11/11/2024
    5 00000000         ; Este programa deve esperar o usu�rio pressionar uma 
                       chave.
    6 00000000         ; Caso o usuário pressione uma chave, um LED deve pisca
                       r a cada 1 segundo.
    7 00000000         
    8 00000000         ; ------------------------------------------------------
                       -------------------------
    9 00000000                 THUMB                        ; Instru��es do
                                                             tipo Thumb-2
   10 00000000         ; ------------------------------------------------------
                       -------------------------
   11 00000000         
   12 00000000         ; Declarações EQU - Defines
   13 00000000         ;<NOME>         EQU <VALOR>
   14 00000000         ; ========================
   15 00000000         ; Definições de Valores
   16 00000000         
   17 00000000         
   18 00000000         ; ------------------------------------------------------
                       -------------------------
   19 00000000         ; �rea de Dados - Declarações de vari�veis
   20 00000000                 AREA             DATA, ALIGN=2
   21 00000000         ; Se alguma variável for chamada em outro arquivo
   22 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   23 00000000         ; partir de outro arquivo
   24 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   25 00000000         ; de <tam> bytes a partir da primeira 
   26 00000000         ; posição da RAM  
   27 00000000         
   28 00000000         ; ------------------------------------------------------
                       -------------------------
   29 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir se
                       rá armazenado na memória de 
   30 00000000         ;                  código
   31 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   32 00000000         
   33 00000000         ; Se alguma função do arquivo for chamada em outro arq
                       uivo 
   34 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a pa
                                                            rtir de 
   35 00000000         ; outro arquivo. No caso startup.s
   36 00000000         
   37 00000000         ; Se chamar alguma função externa 
   38 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   39 00000000         ; função <func>
   40 00000000                 IMPORT           PLL_Init
   41 00000000                 IMPORT           SysTick_Init
   42 00000000                 IMPORT           SysTick_Wait1ms
   43 00000000                 IMPORT           GPIO_Init



ARM Macro Assembler    Page 2 


   44 00000000                 IMPORT           Led_Output
   45 00000000                 IMPORT           Switch_Input
   46 00000000                 IMPORT           Display_Output
   47 00000000         ; ------------------------------------------------------
                       -------------------------
   48 00000000         ; Função main()
   49 00000000         Start
   50 00000000         ; Comece o código aqui <===============================
                       =======================
   51 00000000         
   52 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   53 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   54 00000008 F7FF FFFE       BL               GPIO_Init   ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   55 0000000C         
   56 0000000C F04F 0006       MOV              R0, #2_00000110
   57 00000010 F7FF FFFE       BL               Display_Output
   58 00000014         
   59 00000014 F04F 0005       MOV              R0, #2_00000101
   60 00000018 F7FF FFFE       BL               Display_Output
   61 0000001C         ; R0 -> Contador
   62 0000001C         ; R3 -> Leitura da Switch
   63 0000001C         ; R9 -> Passo a ser incrementado no contador
   64 0000001C         ; R2 -> Quantidade de ticks de ms
   65 0000001C F04F 0000       MOV              R0, #0
   66 00000020 F04F 0901       MOV              R9, #1
   67 00000024 F44F 72FA       MOV              R2, #500
   68 00000028         MainLoop
   69 00000028 F000 F83B       BL               PrintValue  ; Chamada pra mostr
                                                            ar os displays e le
                                                            ds
   70 0000002C F7FF FFFE       BL               Switch_Input ; Chamada pra ler 
                                                            o switch
   71 00000030         CounterLoop
   72 00000030 2B03            CMP              R3, #2_11   ; Se nenhum switch 
                                                            for ativo, apenas i
                                                            ncrementa ou decrem
                                                            enta o contador
   73 00000032 D105            BNE              Step_handler
   74 00000034 4448            ADD              R0, R9      ; Incrementa o cont
                                                            ador
   75 00000036 2800            CMP              R0, #0      ; Compara para ver 
                                                            se nao ficou abaixo
                                                             de zero
   76 00000038 DB15            BLT              CheckUnderflow
   77 0000003A 2863            CMP              R0, #99     ; Compara para ver 
                                                            se nao ficou acima 
                                                            de 100
   78 0000003C DC18            BGT              CheckOverflow
   79 0000003E         
   80 0000003E E7F3            B                MainLoop
   81 00000040         
   82 00000040         Step_handler



ARM Macro Assembler    Page 3 


   83 00000040 2B02            CMP              R3, #2_10   ; Se tiver SW1 ativ
                                                            a, incrementa o pas
                                                            so ou decrementa
   84 00000042 D103            BNE              Neg_handler
   85 00000044 F1B9 0F00       CMP              R9, #0      ; Verifica se é ne
                                                            gativo e se for, de
                                                            crementa o passo
   86 00000048 D41F            BMI              DecrementStep
   87 0000004A E016            B                IncrementStep ; Se nao for, inc
                                                            rementa o passo
   88 0000004C         
   89 0000004C         Neg_handler
   90 0000004C 2B01            CMP              R3, #2_01   ; Se tiver SW2 ativ
                                                            a, inverte o contad
                                                            or negativando o pa
                                                            sso
   91 0000004E D102            BNE              Both_handler
   92 00000050 F1C9 0900       NEG              R9, R9      ; Negativa o passo
   93 00000054 E7E8            B                MainLoop
   94 00000056         
   95 00000056         Both_handler
   96 00000056 2B00            CMP              R3, #2_00   ; Se as duas SW for
                                                            em ativas, realiza 
                                                            as duas ações
   97 00000058 D1E6            BNE              MainLoop
   98 0000005A F1C9 0900       NEG              R9, R9      ; Negativa o valor
   99 0000005E F1B9 0F00       CMP              R9, #0      ; Verifica se é ne
                                                            gativo e se for, de
                                                            crementa o passo
  100 00000062 D412            BMI              DecrementStep
  101 00000064 E009            B                IncrementStep ; Se nao for, inc
                                                            rementa o passo
  102 00000066         
  103 00000066         CheckUnderflow
  104 00000066 2800            CMP              R0, #0      ; Não fica redunda
                                                            nte aqui?
  105 00000068 DADE            BGE              MainLoop
  106 0000006A F04F 0063       MOV              R0, #99
  107 0000006E E7DB            B                MainLoop
  108 00000070         
  109 00000070         CheckOverflow
  110 00000070 2863            CMP              R0, #99     ; Checar com o tiba
                                                            s
  111 00000072 DDD9            BLE              MainLoop
  112 00000074 F04F 0000       MOV              R0, #0
  113 00000078 E7D6            B                MainLoop
  114 0000007A         
  115 0000007A         IncrementStep
  116 0000007A F1B9 0F09       CMP              R9, #9      ; Compara se o pass
                                                            o está no limite s
                                                            uperior (9)     
  117 0000007E BFB4            ITE              LT
  118 00000080 F109 0901       ADDLT            R9, #1      ; Caso não esteja 
                                                            e seja menor que 9,
                                                             adiciona 1
  119 00000084 F04F 0901       MOVGE            R9, #1      ; Caso seja 9 ou ma
                                                            ior, seta para 1
  120 00000088 E7CE            B                MainLoop
  121 0000008A         



ARM Macro Assembler    Page 4 


  122 0000008A         DecrementStep
  123 0000008A F1C9 0900       NEG              R9, R9      ; Torna o valor pos
                                                            itivo
  124 0000008E F1B9 0F01       CMP              R9, #1      ; Compara se o pass
                                                            o está no limite i
                                                            nferior (1)
  125 00000092 BFCC            ITE              GT
  126 00000094 F1A9 0901       SUBGT            R9, #1      ; Caso seja maior q
                                                            ue 1, reduz 1
  127 00000098 F04F 0909       MOVLE            R9, #9      ; Caso seja igual o
                                                            u menor a 1, seta p
                                                            ara 9
  128 0000009C F1C9 0900       NEG              R9, R9      ; Torna o valor neg
                                                            ativo novamente
  129 000000A0 E7C2            B                MainLoop
  130 000000A2         
  131 000000A2         PrintValue
  132 000000A2 B500            PUSH             {LR}        ; Salva o Link Regi
                                                            ster
  133 000000A4 F7FF FFFE       BL               Led_Output  ; Grava na placa os
                                                             Leds
  134 000000A8 F85D EB04       POP              {LR}        ; Volta o Link Regi
                                                            ster
  135 000000AC 4770            BX               LR
  136 000000AE         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  137 000000AE         ; Fim do Arquivo
  138 000000AE         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  139 000000AE 00 00           ALIGN                        ;Garante que o fim 
                                                            da se��o est�
                                                             alinhada 
  140 000000B0                 END                          ;Fim do arquivo
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\main.d -o.\objects\main.o -IC:\Users\Ricar\AppData
\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL
 SETA 1" --predefine="__UVISION_VERSION SETA 536" --predefine="TM4C1294NCPDT SE
TA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 20 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 31 in file main.s
   Uses
      None
Comment: .text unused
Both_handler 00000056

Symbol: Both_handler
   Definitions
      At line 95 in file main.s
   Uses
      At line 91 in file main.s
Comment: Both_handler used once
CheckOverflow 00000070

Symbol: CheckOverflow
   Definitions
      At line 109 in file main.s
   Uses
      At line 78 in file main.s
Comment: CheckOverflow used once
CheckUnderflow 00000066

Symbol: CheckUnderflow
   Definitions
      At line 103 in file main.s
   Uses
      At line 76 in file main.s
Comment: CheckUnderflow used once
CounterLoop 00000030

Symbol: CounterLoop
   Definitions
      At line 71 in file main.s
   Uses
      None
Comment: CounterLoop unused
DecrementStep 0000008A

Symbol: DecrementStep
   Definitions
      At line 122 in file main.s
   Uses
      At line 86 in file main.s
      At line 100 in file main.s

IncrementStep 0000007A

Symbol: IncrementStep
   Definitions
      At line 115 in file main.s
   Uses
      At line 87 in file main.s
      At line 101 in file main.s

MainLoop 00000028



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: MainLoop
   Definitions
      At line 68 in file main.s
   Uses
      At line 80 in file main.s
      At line 93 in file main.s
      At line 97 in file main.s
      At line 105 in file main.s
      At line 107 in file main.s
      At line 111 in file main.s
      At line 113 in file main.s
      At line 120 in file main.s
      At line 129 in file main.s

Neg_handler 0000004C

Symbol: Neg_handler
   Definitions
      At line 89 in file main.s
   Uses
      At line 84 in file main.s
Comment: Neg_handler used once
PrintValue 000000A2

Symbol: PrintValue
   Definitions
      At line 131 in file main.s
   Uses
      At line 69 in file main.s
Comment: PrintValue used once
Start 00000000

Symbol: Start
   Definitions
      At line 49 in file main.s
   Uses
      At line 34 in file main.s
Comment: Start used once
Step_handler 00000040

Symbol: Step_handler
   Definitions
      At line 82 in file main.s
   Uses
      At line 73 in file main.s
Comment: Step_handler used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Display_Output 00000000

Symbol: Display_Output
   Definitions
      At line 46 in file main.s
   Uses
      At line 57 in file main.s
      At line 60 in file main.s

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 43 in file main.s
   Uses
      At line 54 in file main.s
Comment: GPIO_Init used once
Led_Output 00000000

Symbol: Led_Output
   Definitions
      At line 44 in file main.s
   Uses
      At line 133 in file main.s
Comment: Led_Output used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 40 in file main.s
   Uses
      At line 52 in file main.s
Comment: PLL_Init used once
Switch_Input 00000000

Symbol: Switch_Input
   Definitions
      At line 45 in file main.s
   Uses
      At line 70 in file main.s
Comment: Switch_Input used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 41 in file main.s
   Uses
      At line 53 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 42 in file main.s
   Uses
      None
Comment: SysTick_Wait1ms unused
7 symbols
354 symbols in table
