


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Jhony Minetto Araújo, Ricardo Marthus Gremmelmaier, R
                       odrigo Wolsky Poli
    4 00000000         ; Última atualização: 11/11/2024
    5 00000000         ; Este programa deve esperar o usu�rio pressionar uma 
                       chave.
    6 00000000         ; Caso o usuário pressione uma chave, um LED deve pisca
                       r a cada 1 segundo.
    7 00000000         
    8 00000000         ; ------------------------------------------------------
                       -------------------------
    9 00000000                 THUMB                        ; Instru��es do
                                                             tipo Thumb-2
   10 00000000         ; ------------------------------------------------------
                       -------------------------
   11 00000000         
   12 00000000         ; Declarações EQU - Defines
   13 00000000         ;<NOME>         EQU <VALOR>
   14 00000000         ; ========================
   15 00000000         ; Definições de Valores
   16 00000000         
   17 00000000         
   18 00000000         ; ------------------------------------------------------
                       -------------------------
   19 00000000         ; �rea de Dados - Declarações de vari�veis
   20 00000000                 AREA             DATA, ALIGN=2
   21 00000000         ; Se alguma variável for chamada em outro arquivo
   22 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   23 00000000         ; partir de outro arquivo
   24 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   25 00000000         ; de <tam> bytes a partir da primeira 
   26 00000000         ; posição da RAM  
   27 00000000         
   28 00000000         ; ------------------------------------------------------
                       -------------------------
   29 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir se
                       rá armazenado na memória de 
   30 00000000         ;                  código
   31 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   32 00000000         
   33 00000000         ; Se alguma função do arquivo for chamada em outro arq
                       uivo 
   34 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a pa
                                                            rtir de 
   35 00000000         ; outro arquivo. No caso startup.s
   36 00000000         
   37 00000000         ; Se chamar alguma função externa 
   38 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   39 00000000         ; função <func>
   40 00000000                 IMPORT           PLL_Init
   41 00000000                 IMPORT           SysTick_Init
   42 00000000                 IMPORT           SysTick_Wait1ms
   43 00000000                 IMPORT           GPIO_Init



ARM Macro Assembler    Page 2 


   44 00000000                 IMPORT           Led_Output
   45 00000000                 IMPORT           Switch_Input
   46 00000000                 IMPORT           Display_Output
   47 00000000         ; ------------------------------------------------------
                       -------------------------
   48 00000000         ; Função main()
   49 00000000         Start
   50 00000000         ; Comece o código aqui <===============================
                       =======================
   51 00000000         
   52 00000000         ;BL PLL_Init                     ;Chama a subrotina para
                        alterar o clock do microcontrolador para 80MHz
   53 00000000         ;BL SysTick_Init                 ;Chama a subrotina para
                        inicializar o SysTick
   54 00000000         ;BL GPIO_Init                    ;Chama a subrotina que 
                       inicializa os GPIO
   55 00000000         
   56 00000000 F04F 0006       MOV              R0, #2_00000110
   57 00000004 F7FF FFFE       BL               Display_Output
   58 00000008         
   59 00000008 F04F 0005       MOV              R0, #2_00000101
   60 0000000C F7FF FFFE       BL               Display_Output
   61 00000010         ; R0 -> Contador
   62 00000010         ; R3 -> Leitura da Switch
   63 00000010         ; R9 -> Passo a ser incrementado no contador
   64 00000010         ; R2 -> Quantidade de ticks de ms
   65 00000010 F04F 0000       MOV              R0, #0
   66 00000014 F04F 0901       MOV              R9, #1
   67 00000018 F44F 72FA       MOV              R2, #500
   68 0000001C         MainLoop
   69 0000001C F000 F83B       BL               PrintValue  ; Chamada pra mostr
                                                            ar os displays e le
                                                            ds
   70 00000020 F7FF FFFE       BL               Switch_Input ; Chamada pra ler 
                                                            o switch
   71 00000024         CounterLoop
   72 00000024 2B03            CMP              R3, #2_11   ; Se nenhum switch 
                                                            for ativo, apenas i
                                                            ncrementa ou decrem
                                                            enta o contador
   73 00000026 D105            BNE              Step_handler
   74 00000028 4448            ADD              R0, R9      ; Incrementa o cont
                                                            ador
   75 0000002A 2800            CMP              R0, #0      ; Compara para ver 
                                                            se nao ficou abaixo
                                                             de zero
   76 0000002C DB15            BLT              CheckUnderflow
   77 0000002E 2863            CMP              R0, #99     ; Compara para ver 
                                                            se nao ficou acima 
                                                            de 100
   78 00000030 DC18            BGT              CheckOverflow
   79 00000032         
   80 00000032 E7F3            B                MainLoop
   81 00000034         
   82 00000034         Step_handler
   83 00000034 2B02            CMP              R3, #2_10   ; Se tiver SW1 ativ
                                                            a, incrementa o pas
                                                            so ou decrementa
   84 00000036 D103            BNE              Neg_handler



ARM Macro Assembler    Page 3 


   85 00000038 F1B9 0F00       CMP              R9, #0      ; Verifica se é ne
                                                            gativo e se for, de
                                                            crementa o passo
   86 0000003C D41F            BMI              DecrementStep
   87 0000003E E016            B                IncrementStep ; Se nao for, inc
                                                            rementa o passo
   88 00000040         
   89 00000040         Neg_handler
   90 00000040 2B01            CMP              R3, #2_01   ; Se tiver SW2 ativ
                                                            a, inverte o contad
                                                            or negativando o pa
                                                            sso
   91 00000042 D102            BNE              Both_handler
   92 00000044 F1C9 0900       NEG              R9, R9      ; Negativa o passo
   93 00000048 E7E8            B                MainLoop
   94 0000004A         
   95 0000004A         Both_handler
   96 0000004A 2B00            CMP              R3, #2_00   ; Se as duas SW for
                                                            em ativas, realiza 
                                                            as duas ações
   97 0000004C D1E6            BNE              MainLoop
   98 0000004E F1C9 0900       NEG              R9, R9      ; Negativa o valor
   99 00000052 F1B9 0F00       CMP              R9, #0      ; Verifica se é ne
                                                            gativo e se for, de
                                                            crementa o passo
  100 00000056 D412            BMI              DecrementStep
  101 00000058 E009            B                IncrementStep ; Se nao for, inc
                                                            rementa o passo
  102 0000005A         
  103 0000005A         CheckUnderflow
  104 0000005A 2800            CMP              R0, #0      ; Não fica redunda
                                                            nte aqui?
  105 0000005C DADE            BGE              MainLoop
  106 0000005E F04F 0063       MOV              R0, #99
  107 00000062 E7DB            B                MainLoop
  108 00000064         
  109 00000064         CheckOverflow
  110 00000064 2863            CMP              R0, #99     ; Checar com o tiba
                                                            s
  111 00000066 DDD9            BLE              MainLoop
  112 00000068 F04F 0000       MOV              R0, #0
  113 0000006C E7D6            B                MainLoop
  114 0000006E         
  115 0000006E         IncrementStep
  116 0000006E F1B9 0F09       CMP              R9, #9      ; Compara se o pass
                                                            o está no limite s
                                                            uperior (9)     
  117 00000072 BFB4            ITE              LT
  118 00000074 F109 0901       ADDLT            R9, #1      ; Caso não esteja 
                                                            e seja menor que 9,
                                                             adiciona 1
  119 00000078 F04F 0901       MOVGE            R9, #1      ; Caso seja 9 ou ma
                                                            ior, seta para 1
  120 0000007C E7CE            B                MainLoop
  121 0000007E         
  122 0000007E         DecrementStep
  123 0000007E F1C9 0900       NEG              R9, R9      ; Torna o valor pos
                                                            itivo
  124 00000082 F1B9 0F01       CMP              R9, #1      ; Compara se o pass



ARM Macro Assembler    Page 4 


                                                            o está no limite i
                                                            nferior (1)
  125 00000086 BFCC            ITE              GT
  126 00000088 F1A9 0901       SUBGT            R9, #1      ; Caso seja maior q
                                                            ue 1, reduz 1
  127 0000008C F04F 0909       MOVLE            R9, #9      ; Caso seja igual o
                                                            u menor a 1, seta p
                                                            ara 9
  128 00000090 F1C9 0900       NEG              R9, R9      ; Torna o valor neg
                                                            ativo novamente
  129 00000094 E7C2            B                MainLoop
  130 00000096         
  131 00000096         PrintValue
  132 00000096 B500            PUSH             {LR}        ; Salva o Link Regi
                                                            ster
  133 00000098 F7FF FFFE       BL               Led_Output  ; Grava na placa os
                                                             Leds
  134 0000009C F85D EB04       POP              {LR}        ; Volta o Link Regi
                                                            ster
  135 000000A0 4770            BX               LR
  136 000000A2         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  137 000000A2         ; Fim do Arquivo
  138 000000A2         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  139 000000A2 00 00           ALIGN                        ;Garante que o fim 
                                                            da se��o est�
                                                             alinhada 
  140 000000A4                 END                          ;Fim do arquivo
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -I"F:\Program Files\Arm\Packs\Keil
\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 541" --predefine="TM4C1294NCPDT SETA 1" --list=.\listi
ngs\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 20 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 31 in file main.s
   Uses
      None
Comment: .text unused
Both_handler 0000004A

Symbol: Both_handler
   Definitions
      At line 95 in file main.s
   Uses
      At line 91 in file main.s
Comment: Both_handler used once
CheckOverflow 00000064

Symbol: CheckOverflow
   Definitions
      At line 109 in file main.s
   Uses
      At line 78 in file main.s
Comment: CheckOverflow used once
CheckUnderflow 0000005A

Symbol: CheckUnderflow
   Definitions
      At line 103 in file main.s
   Uses
      At line 76 in file main.s
Comment: CheckUnderflow used once
CounterLoop 00000024

Symbol: CounterLoop
   Definitions
      At line 71 in file main.s
   Uses
      None
Comment: CounterLoop unused
DecrementStep 0000007E

Symbol: DecrementStep
   Definitions
      At line 122 in file main.s
   Uses
      At line 86 in file main.s
      At line 100 in file main.s

IncrementStep 0000006E

Symbol: IncrementStep
   Definitions
      At line 115 in file main.s
   Uses
      At line 87 in file main.s
      At line 101 in file main.s

MainLoop 0000001C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: MainLoop
   Definitions
      At line 68 in file main.s
   Uses
      At line 80 in file main.s
      At line 93 in file main.s
      At line 97 in file main.s
      At line 105 in file main.s
      At line 107 in file main.s
      At line 111 in file main.s
      At line 113 in file main.s
      At line 120 in file main.s
      At line 129 in file main.s

Neg_handler 00000040

Symbol: Neg_handler
   Definitions
      At line 89 in file main.s
   Uses
      At line 84 in file main.s
Comment: Neg_handler used once
PrintValue 00000096

Symbol: PrintValue
   Definitions
      At line 131 in file main.s
   Uses
      At line 69 in file main.s
Comment: PrintValue used once
Start 00000000

Symbol: Start
   Definitions
      At line 49 in file main.s
   Uses
      At line 34 in file main.s
Comment: Start used once
Step_handler 00000034

Symbol: Step_handler
   Definitions
      At line 82 in file main.s
   Uses
      At line 73 in file main.s
Comment: Step_handler used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Display_Output 00000000

Symbol: Display_Output
   Definitions
      At line 46 in file main.s
   Uses
      At line 57 in file main.s
      At line 60 in file main.s

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 43 in file main.s
   Uses
      None
Comment: GPIO_Init unused
Led_Output 00000000

Symbol: Led_Output
   Definitions
      At line 44 in file main.s
   Uses
      At line 133 in file main.s
Comment: Led_Output used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 40 in file main.s
   Uses
      None
Comment: PLL_Init unused
Switch_Input 00000000

Symbol: Switch_Input
   Definitions
      At line 45 in file main.s
   Uses
      At line 70 in file main.s
Comment: Switch_Input used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 41 in file main.s
   Uses
      None
Comment: SysTick_Init unused
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 42 in file main.s
   Uses
      None
Comment: SysTick_Wait1ms unused
7 symbols
354 symbols in table
